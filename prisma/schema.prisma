generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // Add this line
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Hotel Booking Models
model Hotel {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  location      String
  image         String
  rating        Float
  pricePerNight Float
  featured      Boolean   @default(false)
  amenities     String[]
  rooms         Room?
  reviews       Review[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Room {
  id        String   @id @default(cuid())
  hotelId   String   @unique
  available Int
  total     Int
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  hotelId   String
  userId    String?
  rating    Float
  comment   String   @db.Text
  date      DateTime @default(now())
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        String   @id @default(cuid())
  hotelId   String
  userId    String
  checkIn   DateTime
  checkOut  DateTime
  status    String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Destination {
  id        String   @id @default(cuid())
  city      String
  country   String
  image     String
  hotels    Int
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}