generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Hotel {
  id          String    @id @default(cuid())
  name        String
  description String
  cityId      String
  image       String
  rating      Float
  featured    Boolean   @default(false)
  amenities   String[]
  latitude    Float
  longitude   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  city        City      @relation(fields: [cityId], references: [id])
  reviews     Review[]
  rooms       Room[]
}

model Review {
  id        String   @id @default(cuid())
  hotelId   String
  userId    String?
  rating    Float
  comment   String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Booking {
  id        String   @id @default(cuid())
  hotelId   String
  userId    String
  roomId    String?
  checkIn   DateTime
  checkOut  DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  room      Room?    @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Room {
  id        String    @id @default(cuid())
  hotelId   String
  available Int
  total     Int
  roomType  RoomType
  image     String
  amenities String[]
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
}

model Destination {
  id        String   @id @default(cuid())
  city      String
  country   String
  image     String
  hotels    Int
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id     String @id @default(cuid())
  image   String
  name   String @unique
  code   String @unique
  cities City[]
}

model City {
  id        String  @id @default(cuid())
  name      String
  image   String
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  hotels    Hotel[]
}

enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  SUITE
  FAMILY
}
